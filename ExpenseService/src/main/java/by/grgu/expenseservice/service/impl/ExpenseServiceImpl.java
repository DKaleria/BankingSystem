package by.grgu.expenseservice.service.impl;

import by.grgu.expenseservice.database.entity.Expense;
import by.grgu.expenseservice.database.repository.ExpenseRepository;
import by.grgu.expenseservice.service.ExpenseService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;

@Service
public class ExpenseServiceImpl implements ExpenseService {

    private final ExpenseRepository expenseRepository;
    private final RestTemplate restTemplate; // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º RestTemplate

    @Autowired
    public ExpenseServiceImpl(ExpenseRepository expenseRepository, RestTemplate restTemplate) {
        this.expenseRepository = expenseRepository;
        this.restTemplate = restTemplate;
    }

    @Override
    public Expense createExpense(Expense expense) {
        // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ `AccountService`
        String birthDateUrl = "http://localhost:8082/accounts/" + expense.getUsername() + "/birthdate";
        ResponseEntity<LocalDate> birthDateResponse = restTemplate.getForEntity(birthDateUrl, LocalDate.class);

        if (birthDateResponse.getStatusCode().isError() || birthDateResponse.getBody() == null) {
            throw new IllegalArgumentException("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!");
        }

        LocalDate birthDate = birthDateResponse.getBody();

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å—Ö–æ–¥ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        if (expense.getDate().isBefore(birthDate)) {
            throw new IllegalArgumentException("‚ùå –û—à–∏–±–∫–∞: –†–∞—Å—Ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω –¥–æ —Ä–æ–∂–¥–µ–Ω–∏—è!");
        }

        // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –¥–æ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–∞—Å—Ö–æ–¥–∞
        String totalIncomeUrl = "http://localhost:8082/incomes/" + expense.getUsername() + "/total";
        ResponseEntity<BigDecimal> incomeResponse = restTemplate.getForEntity(totalIncomeUrl, BigDecimal.class);

        if (incomeResponse.getStatusCode().isError() || incomeResponse.getBody() == null) {
            throw new IllegalArgumentException("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É –¥–æ—Ö–æ–¥–æ–≤!");
        }

        BigDecimal totalIncome = incomeResponse.getBody();

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å—Ö–æ–¥ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–±—â–∏–π –¥–æ—Ö–æ–¥
        if (BigDecimal.valueOf(expense.getAmount()).compareTo(totalIncome) > 0) {
            throw new IllegalArgumentException("‚ùå –û—à–∏–±–∫–∞: –†–∞—Å—Ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –æ–±—â–∏–π –¥–æ—Ö–æ–¥!");
        }

        return expenseRepository.save(expense);
    }

    @Override
    public List<Expense> getAllExpenses(String username) {
        return expenseRepository.findByUsername(username);
    }

    @Override
    public BigDecimal getTotalExpenseForMonth(String username, int month, int year) {
        LocalDate startDate = LocalDate.of(year, month, 1);
        LocalDate endDate = startDate.plusMonths(1).minusDays(1);

        List<Expense> expenses = expenseRepository.findByUsernameAndDateBetween(username, startDate, endDate);
        return expenses.stream()
                .map(expense -> BigDecimal.valueOf(expense.getAmount()))
                .reduce(BigDecimal.ZERO, BigDecimal::add);
    }

    @Override
    public List<Expense> getExpensesForMonth(String username, int month, int year) {
        LocalDate startDate = LocalDate.of(year, month, 1);
        LocalDate endDate = startDate.plusMonths(1).minusDays(1);

        System.out.println("üìå –ó–∞–ø—Ä–æ—Å —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å " + startDate + " –ø–æ " + endDate);

        return expenseRepository.getExpensesForMonth(username, startDate, endDate);
    }
}
